<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Duck vs. IMT Lazarus</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Press Start 2P', cursive;
            background-color: #1a202c;
            color: #e2e8f0;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        canvas {
            background-color: #87ceeb; /* Sky Blue */
            display: block;
            border: 4px solid #4a5568;
            border-radius: 8px;
            box-shadow: 0 10px 20px rgba(0,0,0,0.3);
        }
        #game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.75rem; /* Reduced gap */
        }
        .ui-panel {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 800px;
            padding: 10px;
            background-color: #2d3748;
            border-radius: 8px;
            border: 4px solid #4a5568;
        }
        #times-panel {
             font-size: 0.8rem;
             justify-content: space-around;
        }
        #message-box {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 2rem;
            border-radius: 1rem;
            text-align: center;
            font-size: 1.5rem;
            z-index: 100;
            display: none;
            border: 4px solid #a0aec0;
            min-width: 400px;
        }
        .button {
            background-color: #48bb78;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            cursor: pointer;
            border-bottom: 4px solid #2f855a;
            transition: all 0.1s ease-in-out;
            font-size: 1rem;
        }
        .button:hover {
            transform: translateY(2px);
            border-bottom-width: 2px;
        }
        .button.small {
            padding: 0.25rem 0.5rem;
            font-size: 0.7rem;
            border-bottom-width: 3px;
        }
        .button.small:hover {
            transform: translateY(1px);
            border-bottom-width: 2px;
        }
        #physics-controls {
            display: flex;
            gap: 1rem;
            align-items: center;
            font-size: 0.7rem;
        }
        #physics-controls label {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.2rem;
        }
        input[type="range"] {
            -webkit-appearance: none;
            width: 100px;
            height: 8px;
            background: #4a5568;
            border-radius: 5px;
            outline: none;
        }
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            background: #a0aec0;
            border-radius: 50%;
            cursor: pointer;
        }
        #level-select {
            background-color: #4a5568;
            border: 2px solid #a0aec0;
            border-radius: 4px;
            color: white;
            padding: 4px;
            font-family: 'Press Start 2P', cursive;
        }
        [contenteditable="true"]:focus {
            outline: 2px solid #f6e05e; /* yellow-400 */
            background-color: #4a5568;
        }
        .new-record {
            color: #f6e05e; /* yellow-400 */
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
    </style>
</head>
<body>

<div id="game-container">
    <h1 class="text-3xl">Weather Duck vs. IMT Lazarus</h1>
    <div id="ui-container" class="ui-panel">
        <div id="timer" class="text-xl">Time: 0.000s</div>
        <div class="text-lg">Controls: A/D or ←/→, W or ↑, R</div>
    </div>
    <div id="times-panel" class="ui-panel">
        <div id="best-full-run" contenteditable="true">Best Full Run: --</div>
        <div id="sum-of-best">Sum of Best: --</div>
        <div id="level-best" contenteditable="true">Level Best: --</div>
    </div>
    <div id="controls-container" class="ui-panel">
        <div id="physics-controls">
            <label>Gravity: <span id="gravity-value">1.2</span><input type="range" id="gravity-slider" min="0.1" max="2" step="0.1" value="1.2"></label>
            <label>Jump: <span id="jump-value">18</span><input type="range" id="jump-slider" min="5" max="25" step="1" value="18"></label>
            <label>Speed: <span id="speed-value">12</span><input type="range" id="speed-slider" min="1" max="12" step="1" value="12"></label>
        </div>
        <div id="level-controls" class="flex items-center gap-2">
            <label for="level-select">Mode:</label>
            <select id="level-select"></select>
            <button id="import-button" class="button small">Import</button>
            <button id="export-button" class="button small">Export</button>
        </div>
    </div>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <div id="message-box">
        <p id="message-text"></p>
        <div class="flex justify-center gap-4 mt-4">
             <button id="restart-button" class="button">Play Again</button>
             <button id="next-level-button" class="button" style="display: none;">Next Level</button>
        </div>
    </div>
</div>

<script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    
    // UI Elements
    const timerElement = document.getElementById('timer');
    const messageBox = document.getElementById('message-box');
    const messageText = document.getElementById('message-text');
    const restartButton = document.getElementById('restart-button');
    const nextLevelButton = document.getElementById('next-level-button');
    const levelSelect = document.getElementById('level-select');
    const bestFullRunElement = document.getElementById('best-full-run');
    const sumOfBestElement = document.getElementById('sum-of-best');
    const levelBestElement = document.getElementById('level-best');
    const importButton = document.getElementById('import-button');
    const exportButton = document.getElementById('export-button');

    // Physics Sliders
    const gravitySlider = document.getElementById('gravity-slider');
    const jumpSlider = document.getElementById('jump-slider');
    const speedSlider = document.getElementById('speed-slider');
    const gravityValue = document.getElementById('gravity-value');
    const jumpValue = document.getElementById('jump-value');
    const speedValue = document.getElementById('speed-value');

    // Game constants
    const PLAYER_WIDTH = 40;
    const PLAYER_HEIGHT = 40;
    const MS_PER_UPDATE = 1000 / 39;

    // Adjustable physics
    let GRAVITY = 1.2;
    let JUMP_FORCE = -18;
    let PLAYER_SPEED = 12;

    // Game state
    let player, platforms, hazards, goal, keys, timer, gameRunning, currentLevelIndex;
    let gameMode = 'full'; // 'full' or 'training'
    let bestTimes;
    let timerHasStarted = false;
    
    // Timer variables
    let mainTimerInterval;
    let levelStartTime = 0;
    let lastAttemptStartTime = 0;
    let totalPausedTime = 0;
    let pauseStartTime = 0;
    
    // Game loop timing variables
    let lastTime = 0;
    let lag = 0.0;
    
    // Restart/Reset logic
    let rKeyTimeout = null;

    // Levels Data
    const levels = [
        { // Level 1: The Basics
            start: {x: 50, y: 520},
            layout: [
                { x: 0, y: 580, width: 800, height: 20, type: 'platform' },
                { x: 200, y: 500, width: 100, height: 20, type: 'platform' },
                { x: 350, y: 420, width: 100, height: 20, type: 'platform' },
                { x: 200, y: 340, width: 80, height: 20, type: 'platform' },
                { x: 400, y: 280, width: 20, height: 20, type: 'platform' },
                { x: 500, y: 220, width: 100, height: 20, type: 'platform' },
                { x: 0, y: 200, width: 300, height: 20, type: 'hazard' },
                { x: 50, y: 180, width: 50, height: 20, type: 'platform' },
                { x: 200, y: 140, width: 50, height: 20, type: 'platform' },
                { x: 400, y: 100, width: 250, height: 20, type: 'platform' },
                { x: 700, y: 50, width: 100, height: 20, type: 'platform', goal: true },
            ]
        },
        { // Level 2: Long Jumps
            start: {x: 20, y: 520},
            layout: [
                { x: 0, y: 580, width: 150, height: 20, type: 'platform' },
                { x: 250, y: 540, width: 100, height: 20, type: 'platform' },
                { x: 450, y: 500, width: 100, height: 20, type: 'platform' },
                { x: 650, y: 460, width: 150, height: 20, type: 'platform' },
                { x: 550, y: 360, width: 50, height: 20, type: 'platform' },
                { x: 350, y: 300, width: 50, height: 20, type: 'platform' },
                { x: 150, y: 240, width: 50, height: 20, type: 'platform' },
                { x: 0, y: 180, width: 100, height: 20, type: 'platform', goal: true },
            ]
        },
        { // Level 3: The Climb (REVISED)
            start: {x: 20, y: 520},
            layout: [
                { x: 0, y: 580, width: 100, height: 20, type: 'platform' },
                { x: 150, y: 520, width: 50, height: 20, type: 'platform' },
                { x: 30, y: 460, width: 50, height: 20, type: 'platform' },
                { x: 150, y: 400, width: 50, height: 20, type: 'platform' },
                { x: 30, y: 340, width: 50, height: 20, type: 'platform' },
                { x: 180, y: 280, width: 50, height: 20, type: 'platform' }, // Easier jump
                { x: 350, y: 220, width: 150, height: 20, type: 'platform' }, // Clearer path
                { x: 600, y: 160, width: 50, height: 20, type: 'platform' },
                { x: 750, y: 100, width: 50, height: 20, type: 'platform', goal: true },
            ]
        },
        { // Level 4: The Floor is Lava
            start: {x: 20, y: 400},
            layout: [
                { x: 0, y: 580, width: 800, height: 20, type: 'hazard' },
                { x: 0, y: 450, width: 100, height: 20, type: 'platform' },
                { x: 150, y: 420, width: 20, height: 20, type: 'platform' },
                { x: 220, y: 420, width: 20, height: 20, type: 'platform' },
                { x: 290, y: 420, width: 20, height: 20, type: 'platform' },
                { x: 380, y: 380, width: 100, height: 20, type: 'platform' },
                { x: 380, y: 360, width: 20, height: 20, type: 'hazard' },
                { x: 550, y: 320, width: 100, height: 20, type: 'platform' },
                { x: 700, y: 260, width: 100, height: 20, type: 'platform' },
                { x: 550, y: 200, width: 100, height: 20, type: 'platform' },
                { x: 380, y: 140, width: 100, height: 20, type: 'platform' },
                { x: 200, y: 80, width: 80, height: 20, type: 'platform', goal: true },
            ]
        },
        { // Level 5: The Maze
            start: {x: 380, y: 520},
            layout: [
                 { x: 350, y: 580, width: 100, height: 20, type: 'platform' },
                 { x: 350, y: 500, width: 100, height: 20, type: 'platform' },
                 { x: 250, y: 440, width: 300, height: 20, type: 'platform' },
                 { x: 250, y: 380, width: 50, height: 20, type: 'platform' }, // Left path
                 { x: 150, y: 320, width: 50, height: 20, type: 'platform' },
                 { x: 0, y: 260, width: 100, height: 20, type: 'hazard' }, // Dead end
                 { x: 500, y: 380, width: 50, height: 20, type: 'platform' }, // Right path
                 { x: 600, y: 320, width: 50, height: 20, type: 'platform' },
                 { x: 700, y: 260, width: 100, height: 20, type: 'platform' },
                 { x: 700, y: 200, width: 50, height: 20, type: 'platform' },
                 { x: 550, y: 140, width: 100, height: 20, type: 'platform' },
                 { x: 350, y: 80, width: 100, height: 20, type: 'platform', goal: true },
            ]
        },
         { // Level 6: Precision
            start: {x: 20, y: 520},
            layout: [
                 { x: 0, y: 580, width: 80, height: 20, type: 'platform' },
                 { x: 120, y: 550, width: 15, height: 20, type: 'platform' },
                 { x: 180, y: 520, width: 15, height: 20, type: 'platform' },
                 { x: 240, y: 490, width: 15, height: 20, type: 'platform' },
                 { x: 180, y: 430, width: 15, height: 20, type: 'platform' },
                 { x: 240, y: 370, width: 15, height: 20, type: 'platform' },
                 { x: 350, y: 370, width: 100, height: 20, type: 'platform' },
                 { x: 500, y: 400, width: 15, height: 20, type: 'hazard' },
                 { x: 550, y: 340, width: 15, height: 20, type: 'platform' },
                 { x: 600, y: 280, width: 15, height: 20, type: 'platform' },
                 { x: 680, y: 220, width: 120, height: 20, type: 'platform', goal: true },
            ]
        },
        { // Level 7: The Drop (NERFED)
            start: {x: 380, y: 20},
            layout: [
                { x: 350, y: 80, width: 100, height: 20, type: 'platform' },
                { x: 200, y: 180, width: 80, height: 20, type: 'platform' },
                { x: 500, y: 180, width: 80, height: 20, type: 'platform' },
                { x: 0, y: 250, width: 350, height: 10, type: 'hazard' }, // Wider gap
                { x: 450, y: 250, width: 350, height: 10, type: 'hazard' }, // Wider gap
                { x: 350, y: 320, width: 100, height: 20, type: 'platform' },
                { x: 50, y: 400, width: 100, height: 20, type: 'platform' },
                { x: 650, y: 400, width: 100, height: 20, type: 'platform' },
                { x: 0, y: 580, width: 350, height: 20, type: 'platform' },
                { x: 450, y: 580, width: 350, height: 20, type: 'platform' },
                { x: 380, y: 520, width: 40, height: 20, type: 'platform', goal: true },
            ]
        },
         { // Level 8: Risky Ascent
            start: {x: 20, y: 520},
            layout: [
                { x: 0, y: 580, width: 800, height: 20, type: 'hazard' },
                { x: 0, y: 560, width: 50, height: 20, type: 'platform' },
                { x: 100, y: 500, width: 50, height: 20, type: 'platform' },
                { x: 50, y: 440, width: 20, height: 20, type: 'hazard' },
                { x: 200, y: 420, width: 100, height: 20, type: 'platform' },
                { x: 350, y: 360, width: 100, height: 20, type: 'platform' },
                { x: 250, y: 300, width: 20, height: 20, type: 'hazard' },
                { x: 450, y: 280, width: 50, height: 20, type: 'platform' },
                { x: 600, y: 220, width: 50, height: 20, type: 'platform' },
                { x: 750, y: 160, width: 50, height: 20, type: 'platform' },
                { x: 600, y: 100, width: 50, height: 20, type: 'platform', goal: true },
            ]
        },
        { // Level 9: The Gauntlet
            start: {x: 20, y: 520},
            layout: [
                { x: 0, y: 580, width: 800, height: 20, type: 'platform' },
                { x: 100, y: 540, width: 600, height: 10, type: 'hazard' },
                { x: 150, y: 500, width: 20, height: 20, type: 'platform' },
                { x: 200, y: 460, width: 20, height: 20, type: 'platform' },
                { x: 250, y: 500, width: 20, height: 20, type: 'platform' },
                { x: 300, y: 460, width: 20, height: 20, type: 'platform' },
                { x: 350, y: 500, width: 20, height: 20, type: 'platform' },
                { x: 400, y: 460, width: 200, height: 20, type: 'platform' },
                { x: 650, y: 420, width: 50, height: 20, type: 'platform' },
                { x: 750, y: 380, width: 50, height: 20, type: 'platform' },
                { x: 650, y: 320, width: 50, height: 20, type: 'platform' },
                { x: 750, y: 260, width: 50, height: 20, type: 'platform' },
                { x: 400, y: 200, width: 300, height: 20, type: 'platform' },
                { x: 100, y: 150, width: 200, height: 20, type: 'platform', goal: true },
            ]
        },
        { // Level 10: Final Battle
            start: {x: 380, y: 520},
            layout: [
                { x: 0, y: 580, width: 800, height: 20, type: 'hazard' },
                { x: 350, y: 560, width: 100, height: 20, type: 'platform' },
                { x: 250, y: 480, width: 50, height: 20, type: 'platform' },
                { x: 450, y: 480, width: 50, height: 20, type: 'platform' },
                { x: 100, y: 400, width: 100, height: 10, type: 'hazard' },
                { x: 600, y: 400, width: 100, height: 10, type: 'hazard' },
                { x: 350, y: 380, width: 100, height: 20, type: 'platform' },
                { x: 150, y: 300, width: 15, height: 20, type: 'platform' },
                { x: 550, y: 300, width: 15, height: 20, type: 'platform' },
                { x: 350, y: 220, width: 15, height: 20, type: 'platform' },
                { x: 0, y: 150, width: 250, height: 20, type: 'platform' },
                { x: 550, y: 150, width: 250, height: 20, type: 'platform' },
                { x: 300, y: 80, width: 200, height: 20, type: 'platform', goal: true },
            ]
        },
    ];

    const playerProto = {
        x: 100, y: 500, width: PLAYER_WIDTH, height: PLAYER_HEIGHT, velocityX: 0, velocityY: 0, onGround: false,
        draw() {
            ctx.fillStyle = '#FFD700'; ctx.fillRect(this.x, this.y, this.width, this.height);
            ctx.fillStyle = '#FFA500';
            const beakX = this.velocityX >= 0 ? this.x + this.width : this.x - 10;
            ctx.fillRect(beakX, this.y + this.height * 0.5, 10, 5);
            ctx.fillStyle = '#000000';
            const eyeX = this.velocityX > 0 ? this.x + this.width * 0.7 : this.x + this.width * 0.2;
            ctx.fillRect(eyeX, this.y + this.height * 0.2, 5, 5);
        },
        update() {
            if (keys['a'] || keys['ArrowLeft']) this.velocityX = -PLAYER_SPEED;
            else if (keys['d'] || keys['ArrowRight']) this.velocityX = PLAYER_SPEED;
            else this.velocityX = 0;
            if ((keys['w'] || keys['ArrowUp']) && this.onGround) { this.velocityY = JUMP_FORCE; this.onGround = false; }
            if (this.velocityY < 0 && !(keys['w'] || keys['ArrowUp'])) { this.velocityY += GRAVITY * 2.5; } 
            else { this.velocityY += GRAVITY; }
            this.x += this.velocityX; this.y += this.velocityY; this.onGround = false;
            if (this.x < 0) this.x = 0;
            if (this.x + this.width > canvas.width) this.x = canvas.width - this.width;
            if (this.y > canvas.height) endGame(false);
        }
    };

    function drawGameObjects() {
        ctx.fillStyle = '#654321'; platforms.forEach(p => ctx.fillRect(p.x, p.y, p.width, p.height));
        ctx.fillStyle = '#FF0000'; hazards.forEach(h => ctx.fillRect(h.x, h.y, h.width, h.height));
        ctx.save();
        ctx.fillStyle = '#4B0082'; ctx.shadowColor = 'rgba(255, 0, 255, 0.7)'; ctx.shadowBlur = 15;
        ctx.fillRect(goal.x, goal.y - 50, goal.width, goal.height + 50);
        ctx.fillStyle = '#FF00FF';
        ctx.fillRect(goal.x + 10, goal.y - 35, 10, 10); ctx.fillRect(goal.x + goal.width - 20, goal.y - 35, 10, 10);
        ctx.restore();
    }
    
    function checkCollisions() {
        platforms.forEach(p => {
            if (player.x < p.x + p.width && player.x + player.width > p.x &&
                player.y < p.y + p.height && player.y + player.height > p.y &&
                player.velocityY >= 0 && player.y + player.height - player.velocityY <= p.y + 1) {
                player.y = p.y - player.height; player.velocityY = 0; player.onGround = true;
            }
        });
        hazards.forEach(h => {
             if (player.x < h.x + h.width && player.x + player.width > h.x &&
                player.y < h.y + h.height && player.y + player.height > h.y) { endGame(false); }
        });
        if (player.x < goal.x + goal.width && player.x + player.width > goal.x &&
            player.y < goal.y + goal.height && player.y + player.height > goal.y) { endGame(true); }
    }
    
    function updateGame() { player.update(); checkCollisions(); }

    function renderGame() {
        if (!timerHasStarted) {
            timerElement.textContent = `Time: 0.000s`;
        } else {
            let now = performance.now();
            const startTime = gameMode === 'full' ? mainTimerInterval : levelStartTime;
            let elapsed = now - startTime;
            if (gameMode === 'full') {
                elapsed -= totalPausedTime;
            }
            timer = elapsed / 1000;
            timerElement.textContent = `Time: ${timer.toFixed(3)}s`;
        }
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawGameObjects();
        player.draw();
    }
    
    function gameLoop(currentTime) {
        if (!gameRunning) { lastTime = 0; return; }
        if (lastTime === 0) { lastTime = currentTime; }
        const elapsed = currentTime - lastTime;
        lastTime = currentTime;
        lag += elapsed;
        while (lag >= MS_PER_UPDATE) { updateGame(); lag -= MS_PER_UPDATE; }
        renderGame();
        requestAnimationFrame(gameLoop);
    }
    
    function loadLevel(levelIndex, isTraining = false) {
        if (pauseStartTime > 0 && gameMode === 'full') {
            totalPausedTime += performance.now() - pauseStartTime;
            pauseStartTime = 0;
        }

        if (timerHasStarted) {
            // When training, we reset the level timer.
            // In a full run, the main timer keeps going. We just reset the attempt timer.
            if (isTraining) {
                levelStartTime = performance.now();
            }
            lastAttemptStartTime = performance.now();
        }
       
        currentLevelIndex = levelIndex;
        const levelData = levels[levelIndex];
        player = Object.create(playerProto);
        player.x = levelData.start.x; player.y = levelData.start.y;
        player.velocityX = 0; player.velocityY = 0; player.onGround = false;
        platforms = levelData.layout.filter(item => item.type === 'platform');
        hazards = levelData.layout.filter(item => item.type === 'hazard');
        const goalPlatform = levelData.layout.find(item => item.goal);
        goal = { x: goalPlatform.x + goalPlatform.width/2 - 20, y: goalPlatform.y - 50, width: 40, height: 50 };
        keys = {};
        gameRunning = true;
        messageBox.style.display = 'none';
        nextLevelButton.style.display = 'none';
        restartButton.textContent = 'Play Again';
        updateBestTimeDisplay();
        lastTime = 0; lag = 0.0;
        requestAnimationFrame(gameLoop);
    }
    
    function endGame(win) {
        if (!gameRunning) return;
        gameRunning = false;
        
        if (win) {
            const cleanLevelTime = (performance.now() - lastAttemptStartTime) / 1000;
            let newRecord = false;
            if (!bestTimes.levels[currentLevelIndex] || cleanLevelTime < bestTimes.levels[currentLevelIndex]) {
                bestTimes.levels[currentLevelIndex] = cleanLevelTime;
                newRecord = true;
                saveBestTimes();
            }

            let message = '';
            if (newRecord) message += `<span class="new-record">New Record!</span><br>`;

            if (gameMode === 'full') {
                const isLastLevel = currentLevelIndex === levels.length - 1;
                if (isLastLevel) {
                    const fullRunTime = (performance.now() - mainTimerInterval - totalPausedTime) / 1000;
                    let newFullRecord = false;
                    if (!bestTimes.fullRun || fullRunTime < bestTimes.fullRun) {
                        bestTimes.fullRun = fullRunTime;
                        newFullRecord = true;
                        saveBestTimes();
                    }
                    message += `FULL RUN COMPLETE!<br>Final Time: ${fullRunTime.toFixed(3)}s`;
                    if (newFullRecord) message += `<br><span class="new-record">New Best Full Run!</span>`;
                    restartButton.textContent = 'New Game';
                } else {
                    message += `LEVEL ${currentLevelIndex + 1} COMPLETE!<br>Time: ${cleanLevelTime.toFixed(3)}s`;
                    pauseStartTime = performance.now(); // Start pause timer
                    nextLevelButton.style.display = 'inline-block';
                }
            } else { // Training mode
                message += `LEVEL COMPLETE!<br>Time: ${cleanLevelTime.toFixed(3)}s`;
            }
            messageText.innerHTML = message;
            messageBox.style.borderColor = '#48bb78';

        } else {
            messageText.innerHTML = `GAME OVER!<br>Try again!`;
            messageBox.style.borderColor = '#e53e3e';
        }
        messageBox.style.display = 'block';
    }
    
    function startFullGame() {
        gameMode = 'full';
        timerHasStarted = false;
        totalPausedTime = 0;
        pauseStartTime = 0;
        levelSelect.value = "full";
        loadLevel(0);
    }

    function startTrainingLevel(levelIndex) {
        gameMode = 'training';
        // Only level 1 (in any mode) waits for input.
        if (levelIndex === 0) {
            timerHasStarted = false;
        } else {
            timerHasStarted = true;
        }
        loadLevel(levelIndex, true);
    }
    
    function saveBestTimes() {
        localStorage.setItem('weatherDuckBestTimes', JSON.stringify(bestTimes));
        updateBestTimeDisplay();
    }

    function updateBestTimeDisplay() {
        const fullRun = bestTimes.fullRun ? `${bestTimes.fullRun.toFixed(3)}s` : '--';
        bestFullRunElement.textContent = `Best Full Run: ${fullRun}`;
        
        const sumOfBest = bestTimes.levels.reduce((a, b) => a + (b || 0), 0);
        sumOfBestElement.textContent = sumOfBest > 0 ? `Sum of Best: ${sumOfBest.toFixed(3)}s` : 'Sum of Best: --';
        
        const levelBest = bestTimes.levels[currentLevelIndex] ? `${bestTimes.levels[currentLevelIndex].toFixed(3)}s` : '--';
        levelBestElement.textContent = `Level Best: ${levelBest}`;
    }
    
    function exportTimes() {
        try {
            const timesString = JSON.stringify(bestTimes);
            const base64String = btoa(timesString);

            const textArea = document.createElement("textarea");
            textArea.value = base64String;
            textArea.style.position = "fixed";
            textArea.style.top = "-9999px";
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);

            exportButton.textContent = 'Copied!';
            setTimeout(() => {
                exportButton.textContent = 'Export';
            }, 1500);
        } catch (err) {
            console.error('Export error:', err);
        }
    }

    function importTimes() {
        const importedString = prompt("Paste your saved times string here:");
        if (!importedString) return;

        try {
            const jsonString = atob(importedString);
            const importedData = JSON.parse(jsonString);

            if (importedData && typeof importedData.fullRun !== 'undefined' && Array.isArray(importedData.levels)) {
                bestTimes = importedData;
                if (bestTimes.levels.length < levels.length) {
                    bestTimes.levels.push(...new Array(levels.length - bestTimes.levels.length).fill(null));
                }
                saveBestTimes();
            } else {
                throw new Error('Invalid data structure.');
            }
        } catch (err) {
            console.error('Import error:', err);
        }
    }

    function setupUI() {
        // Load best times from localStorage
        const savedTimes = localStorage.getItem('weatherDuckBestTimes');
        if (savedTimes) {
            bestTimes = JSON.parse(savedTimes);
            if (bestTimes.levels.length < levels.length) {
                bestTimes.levels.push(...new Array(levels.length - bestTimes.levels.length).fill(null));
            }
        } else {
            bestTimes = { fullRun: null, levels: new Array(levels.length).fill(null) };
        }

        // Level Selector
        const fullGameOption = document.createElement('option');
        fullGameOption.value = 'full';
        fullGameOption.textContent = 'Full Game';
        levelSelect.appendChild(fullGameOption);
        levels.forEach((_, index) => {
            const option = document.createElement('option');
            option.value = index;
            option.textContent = `Train Lv ${index + 1}`;
            levelSelect.appendChild(option);
        });
        levelSelect.addEventListener('change', (e) => {
            if (e.target.value === 'full') {
                startFullGame();
            } else {
                startTrainingLevel(parseInt(e.target.value));
            }
        });

        // Physics Sliders
        gravitySlider.addEventListener('input', (e) => { GRAVITY = parseFloat(e.target.value); gravityValue.textContent = GRAVITY.toFixed(1); });
        jumpSlider.addEventListener('input', (e) => { JUMP_FORCE = -parseFloat(e.target.value); jumpValue.textContent = e.target.value; });
        speedSlider.addEventListener('input', (e) => { PLAYER_SPEED = parseFloat(e.target.value); speedValue.textContent = e.target.value; });

        // Buttons
        restartButton.addEventListener('click', () => {
            if (restartButton.textContent === 'New Game') {
                startFullGame();
            } else if (gameMode === 'training') {
                startTrainingLevel(currentLevelIndex);
            } else {
                loadLevel(currentLevelIndex);
            }
        });
        nextLevelButton.addEventListener('click', () => loadLevel(currentLevelIndex + 1));
        importButton.addEventListener('click', importTimes);
        exportButton.addEventListener('click', exportTimes);
        
        // Editable Times
        bestFullRunElement.contentEditable = true;
        levelBestElement.contentEditable = true;

        const handleTimeEdit = (element, timeType) => {
             const text = element.textContent;
             const timeMatch = text.match(/(\d+\.?\d*)/);
             if (timeMatch) {
                 const newTime = parseFloat(timeMatch[1]);
                 if (!isNaN(newTime) && newTime >= 0) {
                     if (timeType === 'fullRun') {
                         bestTimes.fullRun = newTime;
                     } else if (timeType === 'level') {
                         bestTimes.levels[currentLevelIndex] = newTime;
                     }
                     saveBestTimes();
                     return;
                 }
             }
             updateBestTimeDisplay();
        };

        bestFullRunElement.addEventListener('blur', () => handleTimeEdit(bestFullRunElement, 'fullRun'));
        levelBestElement.addEventListener('blur', () => handleTimeEdit(levelBestElement, 'level'));

        const preventEnterAndBlur = (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                e.target.blur();
            }
        };

        bestFullRunElement.addEventListener('keydown', preventEnterAndBlur);
        levelBestElement.addEventListener('keydown', preventEnterAndBlur);


        // Keyboard Listeners
        window.addEventListener('keydown', e => { 
            const key = e.key.toLowerCase();
            
            if (!timerHasStarted && ['w', 'a', 'd', 'arrowup', 'arrowleft', 'arrowright'].includes(key)) {
                timerHasStarted = true;
                const now = performance.now();
                if (gameMode === 'full') {
                    mainTimerInterval = now;
                }
                levelStartTime = now;
                lastAttemptStartTime = now;
            }
            
            keys[key] = true; keys[e.key] = true;
            if (key === 'r' && !e.repeat) {
                rKeyTimeout = setTimeout(() => { startFullGame(); rKeyTimeout = null; }, 600);
            }
        });
        window.addEventListener('keyup', e => { 
            const key = e.key.toLowerCase();
            keys[key] = false; keys[e.key] = false;
            if (key === 'r' && rKeyTimeout) {
                clearTimeout(rKeyTimeout);
                if(gameMode === 'training') {
                    startTrainingLevel(currentLevelIndex);
                } else {
                    loadLevel(currentLevelIndex);
                }
                rKeyTimeout = null;
            }
        });
    }

    // Start the game
    window.onload = () => {
        setupUI();
        startFullGame(); 
    };
</script>

</body>
</html>
